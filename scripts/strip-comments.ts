#!/usr/bin/env ts-node
/**
 * Script: strip-comments.ts
 * Purpose: Remove non-essential comments from source files according to project guideline:
 *  "remove everything unless absolutely required to understand what the code does or why it does it".
 *
 * Heuristics for keeping a comment (any line / block containing one of these case-insensitive tokens is preserved):
 *  - license | copyright
 *  - eslint | tslint | @ts-ignore | @ts-expect-error
 *  - @type | @typedef | @param | @returns (JSDoc structural info)
 *  - TODO | FIXME | NOTE | HACK | BUG
 *  - Generated by (to indicate tooling)
 *  - cspell (spelling directives)
 *  - @jest-environment (jest directives)
 *
 * Additionally keeps block comments at very top of file if they look like a license header (>=3 lines, contains year or 'license').
 * Removes leftover empty lines collapsed to at most 2 in a row.
 */

import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const projectRoot = path.resolve(__dirname, '..')

const KEEP_REGEX =
  /(license|copyright|eslint|ts-ignore|ts-expect-error|@type|@typedef|@param|@returns|todo|fixme|note|hack|bug|generated by|cspell|@jest-environment)/i

const exts = new Set(['.ts', '.tsx', '.js', '.jsx'])

function shouldProcess(file: string) {
  if (file.includes('node_modules')) return false
  if (file.includes('/.next/')) return false
  if (file.includes('/dist/')) return false
  const ext = path.extname(file)
  return exts.has(ext)
}

function readFile(file: string) {
  return fs.readFileSync(file, 'utf8')
}

function isLicenseHeader(content: string): boolean {
  const match = content.match(/^\/\*[\s\S]*?\*\//) // first block comment
  if (!match) return false
  if (!match[0].includes('license') && !/20\d{2}/.test(match[0])) return false
  const lines = match[0].split(/\r?\n/).length
  return lines >= 3 && match.index === 0 // multi-line at very top
}

function stripComments(original: string): string {
  const preserveTopBlock = isLicenseHeader(original)
    ? original.match(/^\/\*[\s\S]*?\*\//)![0]
    : null
  let working = original
  // Temporarily replace preserved header with placeholder
  if (preserveTopBlock) {
    working = working.replace(preserveTopBlock, '___PRESERVE_HEADER_BLOCK___')
  }

  // Preserve essential directive comments by marking them
  const preservedBlocks: string[] = []
  working = working.replace(/\/\*[\s\S]*?\*\//g, (block) => {
    if (KEEP_REGEX.test(block)) {
      const token = `___PRESERVE_BLOCK_${preservedBlocks.length}___`
      preservedBlocks.push(block)
      return token
    }
    return '' // remove
  })

  working = working.replace(/(^|[^:])\/\/.*$/gm, (line) => {
    // Keep if matches regex
    if (KEEP_REGEX.test(line)) return line
    // Otherwise remove comment part
    const idx = line.indexOf('//')
    if (idx >= 0) {
      const prefix = line.slice(0, idx)
      return /\S/.test(prefix) ? prefix : '' // keep code before comment if any
    }
    return line
  })

  // Restore preserved blocks
  preservedBlocks.forEach((b, i) => {
    working = working.replace(`___PRESERVE_BLOCK_${i}___`, b)
  })
  if (preserveTopBlock) {
    working = working.replace(
      '___PRESERVE_HEADER_BLOCK___',
      preserveTopBlock + '\n',
    )
  }

  // Collapse >2 blank lines
  working = working.replace(/\n{3,}/g, '\n\n')

  return working.trimEnd() + '\n'
}

function walk(dir: string, files: string[] = []) {
  for (const entry of fs.readdirSync(dir)) {
    const full = path.join(dir, entry)
    const stat = fs.statSync(full)
    if (stat.isDirectory()) {
      walk(full, files)
    } else if (shouldProcess(full)) {
      files.push(full)
    }
  }
  return files
}

let changed = 0
let scanned = 0
const files = [
  ...walk(path.join(projectRoot, 'src')),
  ...walk(path.join(projectRoot, 'sanity')),
]

for (const file of files) {
  const before = readFile(file)
  const after = stripComments(before)
  scanned++
  if (after !== before) {
    fs.writeFileSync(file, after, 'utf8')
    changed++
  }
}

console.log(`Scanned ${scanned} files. Modified ${changed} files.`)
